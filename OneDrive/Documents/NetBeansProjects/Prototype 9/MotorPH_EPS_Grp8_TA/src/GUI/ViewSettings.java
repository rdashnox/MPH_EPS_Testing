/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;


/**
 *
 * @author dashcodes
 */

import BusinessLogic.EmployeeDetails;
import Controller.DBQueries;
import Controller.RoleAuthenticator;
import Controller.TimeManager;
import Controller.UserSession;
import DatabaseConnector.DatabaseConnection;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class ViewSettings extends JFrame {
    private TimeManager timeManager;
    private String loggedInUsername;
    private Connection connection;
    private RoleAuthenticator roleAuthenticator;
    
    
    public ViewSettings(String username, Connection connection) throws SQLException {
    initComponents();
        
        
    // Stores the username
        this.loggedInUsername = username;
        
        
        // Initialize time manager for real-time date and time display
        timeManager = new TimeManager(dateTodayLabel, timeNowLabel);
        timeManager.startClock();
        
        try {
            // Gets connections from DB (singleton)
            this.connection = DatabaseConnection.getInstance().getConnection();
        }
        catch(SQLException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error connecting to database: " + ex.getMessage(), 
            "Connection Error", 
            JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public ViewSettings() {
        initComponents();

    // Initialize time manager for real-time date and time display
        timeManager = new TimeManager(dateTodayLabel, timeNowLabel);
        timeManager.startClock();        
    }
    
    
    @Override
    public void dispose() {
        // Stop the time manager when the form is closed
        if (timeManager != null) {
            timeManager.stopClock();
        }
        super.dispose();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        leaveButton = new javax.swing.JButton();
        changePasswordButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        dateTodayLabel = new javax.swing.JLabel();
        timeNowLabel = new javax.swing.JLabel();
        homeButton = new javax.swing.JButton();
        paySlipButton = new javax.swing.JButton();
        viewTimesheetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MotorPH Settings");
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel17.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource Folder/MotorPHLogo big.png"))); // NOI18N
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, -1, -1));

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(37, 61, 144));
        jLabel1.setText("Settings");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        leaveButton.setBackground(new java.awt.Color(0, 35, 102));
        leaveButton.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        leaveButton.setForeground(new java.awt.Color(255, 255, 255));
        leaveButton.setText("Time-Off App");
        leaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(leaveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 240, 140, -1));

        changePasswordButton.setBackground(new java.awt.Color(0, 35, 102));
        changePasswordButton.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        changePasswordButton.setForeground(new java.awt.Color(255, 255, 255));
        changePasswordButton.setText("Change Password");
        changePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordButtonActionPerformed(evt);
            }
        });
        jPanel1.add(changePasswordButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 200, 140, -1));

        logoutButton.setBackground(new java.awt.Color(255, 0, 0));
        logoutButton.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        logoutButton.setForeground(new java.awt.Color(255, 255, 255));
        logoutButton.setText("Log out");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });
        jPanel1.add(logoutButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 80, -1));

        dateTodayLabel.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        dateTodayLabel.setForeground(new java.awt.Color(37, 61, 144));
        dateTodayLabel.setText("Date");
        jPanel1.add(dateTodayLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        timeNowLabel.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        timeNowLabel.setForeground(new java.awt.Color(37, 61, 144));
        timeNowLabel.setText("Time");
        jPanel1.add(timeNowLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, -1, -1));

        homeButton.setBackground(new java.awt.Color(255, 0, 0));
        homeButton.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        homeButton.setForeground(new java.awt.Color(255, 255, 255));
        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(homeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 260, 80, -1));

        paySlipButton.setBackground(new java.awt.Color(0, 35, 102));
        paySlipButton.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        paySlipButton.setForeground(new java.awt.Color(255, 255, 255));
        paySlipButton.setText("Pay Slip");
        paySlipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paySlipButtonActionPerformed(evt);
            }
        });
        jPanel1.add(paySlipButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 320, 140, -1));

        viewTimesheetButton.setBackground(new java.awt.Color(0, 35, 102));
        viewTimesheetButton.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        viewTimesheetButton.setForeground(new java.awt.Color(255, 255, 255));
        viewTimesheetButton.setText("Timesheet");
        viewTimesheetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTimesheetButtonActionPerformed(evt);
            }
        });
        jPanel1.add(viewTimesheetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 140, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void leaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveButtonActionPerformed
        try {
        // Get the logged-in user from UserSession
        EmployeeDetails user = UserSession.getInstance().getLoggedInUser();
        
        if (user == null) {
            JOptionPane.showMessageDialog(this, 
                "User session not found. Please log in again.", 
                "Session Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        String designation = user.getDesignation();
        
        // Check if the designation contains "Rank and File"
        if (designation.contains("Rank and File")) {
            // Navigate to Leave Application
            new LeaveApplication (
                user.getFirstName(),
                user.getLastName(),
                user.getDesignation(),
                user.getEid(),
                user.getUserName(),  
                connection                  
            ).setVisible(true);
        } else {
            // FIXED: Pass all necessary user details to LeaveDashboard
            new LeaveDashboard(
                user.getFirstName(),
                user.getLastName(),
                user.getDesignation(),
                user.getEid(),
                user.getUserName(),  // Include username if needed
                connection
            ).setVisible(true);
        }
        this.dispose(); // Close the current window
    } catch (HeadlessException ex) {
        Logger.getLogger(ViewSettings.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this,
            "Error: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_leaveButtonActionPerformed

    private void changePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordButtonActionPerformed
        try {
        if (this.loggedInUsername == null || this.loggedInUsername.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "User session not found. Please log in again.", 
                "Session Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Opens changePassword and pass the username and connection
        new ChangePassword(this.loggedInUsername, this.connection).setVisible(true);
        this.dispose();
    } catch (HeadlessException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error opening Change Password: " + ex.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    }   catch (SQLException ex) {
            Logger.getLogger(ViewSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_changePasswordButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
         // Close all open frames except the LoginPage we're about to open
        Frame[] frames = Frame.getFrames();
        for (Frame frame : frames) {
            if (frame.isVisible() && !(frame instanceof LoginPage)) {
                frame.dispose();
            }
        }
        // Open the login page
        new LoginPage().setVisible(true);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        try {
        // Get the logged-in user from UserSession
        EmployeeDetails user = UserSession.getInstance().getLoggedInUser();
        
        if (user == null) {
            JOptionPane.showMessageDialog(this, 
                "User session not found. Please log in again.", 
                "Session Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String designation = user.getDesignation();
        
        // Check if the designation contains "Rank and File"
        if (designation.contains("Rank and File")) {
            // Navigate to EmployeeDashboard using the stored user data
            
            new EmployeeDashboard(
                user.getFirstName(),
                user.getLastName(),
                user.getDesignation(),
                user.getEid(),
                user.getBasicSalary(),
                user.getTotalAllowances(),
                user.getTotalIncentives(), 
                user.getTotalDeductions(),
                user.getNetPay(),
                UserSession.getInstance().getUsername(),
                connection
            ).setVisible(true);
        } else {
            // Navigate to AdminDashboard
            new AdminDashboard(
                UserSession.getInstance().getUsername(),
                connection
            ).setVisible(true);
        }
        
        this.dispose(); // Close the current window
    } catch (Exception ex) {
        Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this,
            "Error: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_homeButtonActionPerformed

    private void paySlipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paySlipButtonActionPerformed
        try {
        if (this.loggedInUsername == null || this.loggedInUsername.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "User session not found. Please log in again.", 
                "Session Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Opens Payslip Dashboard and pass the username and connection
        new PaySlip(this.loggedInUsername, this.connection).setVisible(true);
        this.dispose();
    } catch (HeadlessException ex) {
        JOptionPane.showMessageDialog(this, 
            "Error opening Payslip: " + ex.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_paySlipButtonActionPerformed

    private void viewTimesheetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTimesheetButtonActionPerformed
        try {
        // Get the logged-in user from UserSession
        EmployeeDetails user = UserSession.getInstance().getLoggedInUser();
        
        if (user == null) {
            JOptionPane.showMessageDialog(this, 
                "User session not found. Please log in again.", 
                "Session Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        String designation = user.getDesignation();
        
        // Check if the designation contains "Rank and File"
        if (designation.contains("Rank and File")) {
            // Navigate to EmployeeDashboard
            JOptionPane.showMessageDialog(this, 
                "You are not authorized to access this page.", 
                "Unauthorized access.", 
                JOptionPane.ERROR_MESSAGE);
            new EmployeeDashboard(
                user.getFirstName(),
                user.getLastName(),
                user.getDesignation(),
                user.getEid(),
                user.getBasicSalary(),
                user.getTotalAllowances(),
                user.getTotalDeductions(),
                user.getNetPay(),
                user.getUserName(),  
                connection                  
            ).setVisible(true);
        } else {
            // FIXED: Pass all necessary user details to ViewTimesheet
            new ViewTimesheet(
                user.getFirstName(),
                user.getLastName(),
                user.getDesignation(),
                user.getEid(),
                user.getUserName()  // Include username if needed
            ).setVisible(true);
        }
        this.dispose(); // Close the current window
    } catch (HeadlessException ex) {
        Logger.getLogger(ViewSettings.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this,
            "Error: " + ex.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_viewTimesheetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewSettings().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changePasswordButton;
    private javax.swing.JLabel dateTodayLabel;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton leaveButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton paySlipButton;
    private javax.swing.JLabel timeNowLabel;
    private javax.swing.JButton viewTimesheetButton;
    // End of variables declaration//GEN-END:variables
}
